<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.yxm.ssm</groupId>
    <artifactId>springboot-springmvc-mybatis</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <!-- 继承spring boot的父工程 -->
    <!-- spring boot父工程直接约束了常用依赖的版本 -->
    <!-- 声明了一对<dependencyManagement>，声明了一堆依赖的版本号 -->
    <!-- 声明了<pluginManagement> -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.9.RELEASE</version>
    </parent>

    <dependencies>
        <!-- 添加一个支持web应用的spring boot依赖 -->
        <!-- spring boot会根据我们引入的依赖，判断出来我们要开发一个web工程 -->
        <!-- 接着会对web工程需要的东西，给我们自动配置和整合好包括spring mvc，web.xml，内嵌的tomcat服务器，自动进行配置 -->
        <!-- 一会儿我们直接写一个spring mvc的controller，然后启动一个main类，spring boot直接就给我们启动一个tomcat服务器，然后部署这个web工程，访问浏览器，直接就可以测试了 -->
        <!-- 自动化将我们可能需要的一些web相关的依赖，都自动给我们引入进来了，负责说那些依赖的版本都是兼容 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- 引入mybatis-spring-boot-starter依赖，用于mybatis与spring boot整合 -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.3.1</version>
        </dependency>
        <!-- 引入mysql驱动依赖 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>
        <!-- 引入spring-boot-starter-data-jpa依赖 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <!-- 引入阿里的druid连接池依赖 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.1.6</version>
        </dependency>
    </dependencies>

    <!-- 引入一个spring boot插件，可以支持我们打包程序 -->
    <!-- 打包时是需要将所有依赖的第三方jar包都打进来的，spring boot这个插件可以支持 -->
    <!-- 支持我们将jar包打成一个包含所有依赖的可以执行的一个jar包 -->
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <!-- 默认情况下，打包之后，是直接将devgtools排除在歪的 -->
                <!-- 但是加了这个东东之后，就会将devtools给打到jar包里去，部署到服务器上之后，devtools生效的 -->
                <!--
                <configuration>
                    <excludeDevtools>false</excludeDevtools>
                </configuration>
                -->
            </plugin>
        </plugins>
    </build>




</project>